@page "/gpx"
@using MVC_to_Blazor_iteration.Models
@inject ILogger<GPXPage> Logger

<h2>GPX Page</h2>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div class="card bg-light bg-opacity-75 shadow rounded p-4">
    <div class="d-flex">
        <!-- Add Marker Form -->
        <div class="p-2" style="width: 20%;">
            <h3>Add Marker</h3>
            <EditForm Model="@Model" OnValidSubmit="HandleAddMarker">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputText @bind-Value="Model.MarkerName" class="form-control" placeholder="Name" /><br />
                <InputText @bind-Value="Model.MarkerLat" class="form-control" placeholder="Latitude" /><br />
                <InputText @bind-Value="Model.MarkerLng" class="form-control" placeholder="Longitude" /><br />
                <button type="submit" class="btn btn-success">Add Marker</button>
            </EditForm>

            <h4>Markers</h4>
            <ul>
                @foreach (var marker in Model.CustomMarkers)
                {
                    <li>@marker.Name (@marker.Lat, @marker.Lng)</li>
                }
            </ul>
        </div>

        <!-- Upload GPX -->
        <div class="p-2" style="width: 60%;">
            <h3>Upload GPX File</h3>
            <InputFile OnChange="HandleFileUpload" accept=".gpx" class="form-control" />
            <br />
            <button class="btn btn-primary" @onclick="ParseUploadedFile" disabled="@(!HasUploadedFile)">Upload</button>

            <h4>Tracks</h4>
            <ul>
                @foreach (var track in Model.GpxTracks)
                {
                    <li>@track.Name - @track.Coordinates.Count points</li>
                }
            </ul>
        </div>

        <!-- Distance and Bearing -->
        <div class="p-2" style="width: 20%;">
            <h3>Distance and Bearing</h3>
            <ul>
                @foreach (var info in Model.DistanceBearingData)
                {
                    <li>
                        <b>@info.PlaneName</b>
                        <ul>
                            @foreach (var md in info.MarkerData)
                            {
                                <li>From @md.MarkerName: @md.Distance miles, Bearing: @md.Bearing°</li>
                            }
                        </ul>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    private GPXPageViewModel Model = new();
    private IBrowserFile? UploadedFile;
    private string? ErrorMessage;

    private bool HasUploadedFile => UploadedFile is not null;

    private void HandleAddMarker()
    {
        if (float.TryParse(Model.MarkerLat, out float lat) && float.TryParse(Model.MarkerLng, out float lng))
        {
            Model.CustomMarkers.Add(new CustomMarker
            {
                Id = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                Name = Model.MarkerName,
                Lat = lat,
                Lng = lng
            });

            Model.MarkerName = Model.MarkerLat = Model.MarkerLng = string.Empty;
        }
        else
        {
            ErrorMessage = "Please enter valid marker details.";
        }
    }

    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;
    }

    private async Task ParseUploadedFile()
    {
        if (UploadedFile is null) return;

        using var stream = UploadedFile.OpenReadStream();
        using var reader = new StreamReader(stream);
        var gpxText = await reader.ReadToEndAsync();

        var track = ParseGPX(gpxText, UploadedFile.Name, Model.GpxTracks.Count + 1);
        if (track != null)
        {
            Model.GpxTracks.Add(track);
        }
        else
        {
            ErrorMessage = "No valid track data found.";
        }

        UploadedFile = null;
    }

    private GPXTrack? ParseGPX(string gpxText, string fileName, int id)
    {
        var coordinates = new List<Coordinate>();
        var xml = new XmlDocument();
        xml.LoadXml(gpxText);
        var trkpts = xml.GetElementsByTagName("trkpt");

        foreach (XmlNode trkpt in trkpts)
        {
            if (!float.TryParse(trkpt.Attributes?["lat"]?.Value, NumberStyles.Any, CultureInfo.InvariantCulture, out float lat) ||
                !float.TryParse(trkpt.Attributes?["lon"]?.Value, NumberStyles.Any, CultureInfo.InvariantCulture, out float lng))
            {
                continue;
            }

            var elevateNode = trkpt.SelectSingleNode("ele");
            float ele = 0;
            if (elevateNode != null) float.TryParse(elevateNode.InnerText, NumberStyles.Any, CultureInfo.InvariantCulture, out ele);

            var timeNode = trkpt.SelectSingleNode("time");
            if (timeNode == null || !DateTime.TryParse(timeNode.InnerText, out var time)) continue;

            coordinates.Add(new Coordinate { Lat = lat, Lng = lng, Ele = ele, Time = time });
        }

        if (coordinates.Count == 0) return null;

        return new GPXTrack
        {
            Id = id,
            Name = fileName,
            Coordinates = coordinates,
            Color = GetRandomColour()
        };
    }

    private string GetRandomColour()
    {
        var rand = new Random();
        return $"#{rand.Next(0x1000000):X6}";
    }
    }
}
